@page "/"
<PageTitle>Home</PageTitle>
@inject IWeatherForecastProvider DataBroker
@inject IRenderModeProvider RenderModeProvider
@rendermode InteractiveServer

<h1>Weather</h1>
<div class="alert alert-primary">Render Mode: @this.RenderModeProvider.RenderMode</div>
<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureC.TemperatureAsDegF()</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        var result = await this.DataBroker.GetWeatherForecastsAsync(ListRequest.Default());
        forecasts = result.Items;
    }
}
